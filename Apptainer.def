# This builds a dockerfile containing a working copy of PySR
# with all pre-requisites installed.

Bootstrap: docker
From: rockylinux/rockylinux:{{ ROCKY_VERSION }}

%arguments
	JULIA_RELEASE=1.10
	JULIA_RELEASE_VERSION=4
	PYSR_VERSION=0.19.3
	PYTHON_VERSION=3.12
	ROCKY_VERSION=8

%files
	./requirements.txt /opt/pysr/requirements.txt
	./pyproject.toml /opt/pysr/pyproject.toml
	./setup.py /opt/pysr/setup.py
	./pysr /opt/pysr/pysr

%environment
	# Where to find Julia and its libraries
	export LD_LIBRARY_PATH="/opt/julia/lib:/opt/julia/lib/julia:$LD_LIBRARY_PATH"
	export PATH="/opt/julia/bin:$PATH"
	# Use the container Julia binary, put the Project TOML file in the users home directory
	export PYTHON_JULIAPKG_EXE=/opt/julia/bin/julia
	export PYTHON_JULIAPKG_PROJECT="$HOME/.pysr"

%post
	dnf install -y wget python{{ PYTHON_VERSION }} python{{ PYTHON_VERSION }}-pip

	cd /opt

	# Download the version of Julia specified by the JULIA_RELEASE and JULIA_RELEASE_VERSION arguments
	JULIA=julia-{{ JULIA_RELEASE }}.{{ JULIA_RELEASE_VERSION }}

	wget https://julialang-s3.julialang.org/bin/linux/x64/{{ JULIA_RELEASE }}/${JULIA}-linux-x86_64.tar.gz

	# Install it in /opt/julia
	tar zxf ${JULIA}-linux-x86_64.tar.gz
	rm ${JULIA}-linux-x86_64.tar.gz
	mv ${JULIA} julia

	PATH="/opt/julia/bin:${PATH}"

	cd /opt/pysr

	# Install IPython and other useful libraries:
	pip3 install --no-cache-dir ipython matplotlib

	pip3 install --no-cache-dir -r /opt/pysr/requirements.txt

	# Install PySR:
	pip3 install --no-cache-dir .

%runscript
	[ ! -d $HOME/.pysr ] && mkdir $HOME/.pysr
	cd /opt/pysr
	ipython
